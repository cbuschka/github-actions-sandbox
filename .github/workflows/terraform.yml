name: terraform

on:
  pull_request:
    paths:
      - '*/terraform/**.tf' # Intransparent: bezieht sich auf infra/terraform, service1/terraform und service2/terraform
      - '!tfmodules/**'     # Schlie√üt den modules Ordner aus - da kann und soll kein Plan durchgef√ºhrt werden

# Problem: jeder Job l√§uft durch die Matrix wo anders, ein default kann nicht f√ºr alle gesetzt sein
# L√∂sung ist der "hack" √ºber die gleichnamige env-var, vgl https://github.community/t/use-working-directory-for-entire-job/16747/2
#defaults:
#  run:
#    working-directory: "terraform/demo"

env:
  # Problem: "nonlive" ist Abh√§ngig vom Pfad in dem sp√§ter gearbeitet wird
  # Workaround: die Rolle hei√üt immer gleich, e.g. "githubactions_ron"
  TF_VAR_assume_role: "nonlive-githubactions"
  AWS_REGION: "eu-central-1"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:  # sorgt f√ºr ein √§hnliches Konstrukt wie for_each. Eben eine Matrix.
        service_name: ["service1", "service2", "infra"]
        stage: ["demo"]
    name: Terraform
    runs-on: ubuntu-latest
    env:
      working-directory: '${{ matrix.service_name }}/terraform/${{ matrix.stage }}'
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.4

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ env.working-directory }}
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.working-directory }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.working-directory }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -refresh=false -detailed-exitcode -lock=false -no-color
        working-directory: ${{ env.working-directory }}
        continue-on-error: true
      
      - uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `Workflow for ${{ matrix.service_name }}-${{ matrix.stage }}
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Exit on plan failure
        run: exit(1)
        if: steps.plan.outcome == 'failure'
